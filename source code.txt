import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report
true_df = pd.read_csv('True.csv')
fake_df = pd.read_csv('Fake.csv')
if 'text' not in true_df.columns or 'text' not in fake_df.columns:
    raise ValueError("Both datasets must contain a 'text' column with news content.")
true_df['label'] = 0  # Label true news as 0
fake_df['label'] = 1  # Label fake news as 1
df = pd.concat([true_df, fake_df], ignore_index=True)
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)
model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(X_train, y_train)
predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
classification_report_result = classification_report(y_test, predictions)
print(f'Accuracy: {accuracy}')
print('Classification Report:\n', classification_report_result)
user_input = input("Enter a news article: ")
user_prediction = model.predict([user_input])
if user_prediction[0] == 0:
    print("The news is likely to be true.")
else:
    print("The news is likely to be fake.")
